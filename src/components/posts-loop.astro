---
import { getCollection } from "astro:content";
const allPosts = await getCollection("post");

const { count } = Astro.props;

function parseDate(dateStr: string) {
  if (!dateStr) return new Date();
  const [month, day, year] = dateStr.split(" ");
  return new Date(`${month} ${parseInt(day)}, ${year}`);
}

const sortedPosts = allPosts
  .map((post) => ({
    ...post,
    date: parseDate(post.data.dateFormatted),
  }))
  .sort((a, b) => b.date.getTime() - a.date.getTime());

const postsLoop = sortedPosts.slice(0, count).map((post) => ({
  title: post.data.title || '',
  description: post.data.description || '',
  dateFormatted: post.data.dateFormatted || '',
  tags: post.data.tags || [],
  link: `/post/${post.slug}`,
}));

interface Post {
  tags: string[];
  // ... other post properties
}
---

<div class="flex flex-col items-stretch w-full gap-5">
  {
    postsLoop.map((post) => (
      <div
        class="relative border border-transparent border-dashed cursor-pointer p-7 group rounded-2xl"
        onclick={`location.href = '${post.link}'`}
      >
        <div class="absolute inset-0 z-20 w-full h-full duration-300 ease-out bg-neutral-950 border border-dashed rounded-2xl border-neutral-700 group-hover:-translate-x-1 group-hover:-translate-y-1" />
        <div class="absolute inset-0 z-10 w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-700 group-hover:translate-x-1 group-hover:translate-y-1" />
        <div class="relative z-30 duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
          <h2 class="flex items-center mb-3">
            <a
              href={post.link}
              class="text-base font-bold leading-tight tracking-tight sm:text-lg text-neutral-100"
            >
              {post.title}
            </a>
            <svg
              class="group-hover:translate-x-0 flex-shrink-0 translate-y-0.5 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200 transform text-neutral-400"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7 17L17 7M17 7H7M17 7V17"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </h2>
          <p class="text-sm text-neutral-400">
            <span>{post.description}</span>
          </p>
          <div class="mt-2.5 text-xs font-medium text-neutral-500">
            <span>Posted on {post.dateFormatted}</span>
            {post.tags.length > 0 && (
              <>
                <span class="mx-2">â€¢</span>
                <div class="flex gap-2">
                  {(post.tags as string[]).map((tag) => (
                    <span class="px-2 py-1 bg-neutral-800/50 rounded-full text-xs">
                      {tag}
                    </span>
                  ))}
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    ))
  }
</div>

<style>
  /* Additional dark theme styles */
  :global(body) {
    background-color: rgb(10, 10, 10);
    color: rgb(229, 229, 229);
  }
</style>
